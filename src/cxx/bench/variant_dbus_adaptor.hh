
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__variant_dbus_adaptor2_hh__ADAPTOR_MARSHAL_H
#define __dbusxx__variant_dbus_adaptor2_hh__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>
#include "Variant.hh"

namespace variant {
namespace dbus {

class bench_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    bench_adaptor()
    : ::DBus::InterfaceAdaptor("variant.dbus.bench")
    {
        register_method(bench_adaptor, test1_mss, _test1_mss_stub);
        register_method(bench_adaptor, test1_msas, _test1_msas_stub);
        register_method(bench_adaptor, test1_msv, _test1_msv_stub);
        register_method(bench_adaptor, test1_mis, _test1_mis_stub);
        register_method(bench_adaptor, test1_miv, _test1_miv_stub);
        register_method(bench_adaptor, test2_mss, _test2_mss_stub);
        register_method(bench_adaptor, test2_msas, _test2_msas_stub);
        register_method(bench_adaptor, test2_msv, _test2_msv_stub);
        register_method(bench_adaptor, test2_mis, _test2_mis_stub);
        register_method(bench_adaptor, test2_miv, _test2_miv_stub);
        register_method(bench_adaptor, test3_mss, _test3_mss_stub);
        register_method(bench_adaptor, test3_msas, _test3_msas_stub);
        register_method(bench_adaptor, test3_msv, _test3_msv_stub);
        register_method(bench_adaptor, test3_mis, _test3_mis_stub);
        register_method(bench_adaptor, test3_miv, _test3_miv_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument test1_mss_args[] = 
        {
            { "mapin", "a{ss}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test1_msas_args[] = 
        {
            { "mapin", "a{sas}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test1_msv_args[] = 
        {
            { "mapin", "a{sv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test1_mis_args[] = 
        {
            { "mapin", "a{is}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test1_miv_args[] = 
        {
            { "mapin", "a{iv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test2_mss_args[] = 
        {
            { "mapin", "a{ss}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test2_msas_args[] = 
        {
            { "mapin", "a{sas}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test2_msv_args[] = 
        {
            { "mapin", "a{sv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test2_mis_args[] = 
        {
            { "mapin", "a{is}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test2_miv_args[] = 
        {
            { "mapin", "a{iv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test3_mss_args[] = 
        {
            { "mapin", "a{ss}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test3_msas_args[] = 
        {
            { "mapin", "a{sas}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test3_msv_args[] = 
        {
            { "mapin", "a{sv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test3_mis_args[] = 
        {
            { "mapin", "a{is}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test3_miv_args[] = 
        {
            { "mapin", "a{iv}", true },
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod bench_adaptor_methods[] = 
        {
            { "test1_mss", test1_mss_args },
            { "test1_msas", test1_msas_args },
            { "test1_msv", test1_msv_args },
            { "test1_mis", test1_mis_args },
            { "test1_miv", test1_miv_args },
            { "test2_mss", test2_mss_args },
            { "test2_msas", test2_msas_args },
            { "test2_msv", test2_msv_args },
            { "test2_mis", test2_mis_args },
            { "test2_miv", test2_miv_args },
            { "test3_mss", test3_mss_args },
            { "test3_msas", test3_msas_args },
            { "test3_msv", test3_msv_args },
            { "test3_mis", test3_mis_args },
            { "test3_miv", test3_miv_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod bench_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty bench_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface bench_adaptor_interface = 
        {
            "variant.dbus.bench",
            bench_adaptor_methods,
            bench_adaptor_signals,
            bench_adaptor_properties
        };
        return &bench_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t test1_mss(const std::map< std::string, std::string >& mapin) = 0;
    virtual int32_t test1_msas(const std::map< std::string, std::vector< std::string > >& mapin) = 0;
    virtual int32_t test1_msv(const std::map< std::string, Variant >& mapin) = 0;
    virtual int32_t test1_mis(const std::map< int32_t, std::string >& mapin) = 0;
    virtual int32_t test1_miv(const std::map< int32_t, Variant >& mapin) = 0;
    virtual int32_t test2_mss(const std::map< std::string, std::string >& mapin) = 0;
    virtual int32_t test2_msas(const std::map< std::string, std::vector< std::string > >& mapin) = 0;
    virtual int32_t test2_msv(const std::map< std::string, ::DBus::Variant >& mapin) = 0;
    virtual int32_t test2_mis(const std::map< int32_t, std::string >& mapin) = 0;
    virtual int32_t test2_miv(const std::map< int32_t, ::DBus::Variant >& mapin) = 0;
    virtual int32_t test3_mss(const std::map< std::string, std::string >& mapin) = 0;
    virtual int32_t test3_msas(const std::map< std::string, std::vector< std::string > >& mapin) = 0;
    virtual int32_t test3_msv(const std::map< std::string, ::DBus::Variant >& mapin) = 0;
    virtual int32_t test3_mis(const std::map< int32_t, std::string >& mapin) = 0;
    virtual int32_t test3_miv(const std::map< int32_t, ::DBus::Variant >& mapin) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _test1_mss_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argin1; ri >> argin1;
        int32_t argout1 = test1_mss(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test1_msas_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::vector< std::string > > argin1; ri >> argin1;
        int32_t argout1 = test1_msas(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test1_msv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, Variant > argin1; ri >> argin1;
        int32_t argout1 = test1_msv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test1_mis_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, std::string > argin1; ri >> argin1;
        int32_t argout1 = test1_mis(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test1_miv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, Variant > argin1; ri >> argin1;
        int32_t argout1 = test1_miv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test2_mss_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argin1; ri >> argin1;
        int32_t argout1 = test2_mss(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test2_msas_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::vector< std::string > > argin1; ri >> argin1;
        int32_t argout1 = test2_msas(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test2_msv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, ::DBus::Variant > argin1; ri >> argin1;
        int32_t argout1 = test2_msv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test2_mis_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, std::string > argin1; ri >> argin1;
        int32_t argout1 = test2_mis(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test2_miv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, ::DBus::Variant > argin1; ri >> argin1;
        int32_t argout1 = test2_miv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test3_mss_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argin1; ri >> argin1;
        int32_t argout1 = test3_mss(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test3_msas_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::vector< std::string > > argin1; ri >> argin1;
        int32_t argout1 = test3_msas(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test3_msv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, ::DBus::Variant > argin1; ri >> argin1;
        int32_t argout1 = test3_msv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test3_mis_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, std::string > argin1; ri >> argin1;
        int32_t argout1 = test3_mis(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _test3_miv_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< int32_t, ::DBus::Variant > argin1; ri >> argin1;
        int32_t argout1 = test3_miv(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx__variant_dbus_adaptor2_hh__ADAPTOR_MARSHAL_H
